# -*- coding: utf-8 -*-
"""Project_Car_price_Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/JahnaviKharva/Car-price-prediction/blob/main/Project_Car_price_Prediction.ipynb

importing the dependencies
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn import metrics
import pickle

"""data collection and processing"""

# loading the data from csv file to pandas dataframe
car_dataset = pd.read_csv('C:/Users/Jahnavi Kharva/OneDrive/Desktop/car price project/car data.csv')

# inspecting the first 5 rows of the dataframe
car_dataset.head()

# checking the number of rows and columns
car_dataset.shape

# getting some info about the dataset
car_dataset.info()

# checking the number of missing values
car_dataset.isnull().sum()

# checking the distribution of categorical data
print(car_dataset.Fuel_Type.value_counts())
print(car_dataset.Seller_Type.value_counts())
print(car_dataset.Transmission.value_counts())

"""encoding the categarical data"""

# encoding "Fuel_Type" column
car_dataset.replace({'Fuel_Type' : {'Petrol':0, 'Diesel':1, 'CNG':2}}, inplace=True)

# encoding "Seller_Type" column
car_dataset.replace({'Seller_Type' : {'Dealer':0, 'Individual':1}}, inplace=True)

# encoding "Transmission" column
car_dataset.replace({'Transmission' : {'Manual':0, 'Automatic':1}}, inplace=True)

car_dataset.head()

"""splitting the data and target"""

x = car_dataset.drop(['Car_Name', 'Selling_Price'], axis=1)
y = car_dataset['Selling_Price']

print(x)

print(y)

"""splitting training and test data"""

X_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size = 0.1, random_state =2)

"""model training

1. Linear Regression
"""

# loading the linear regression model
lin_reg_model = LinearRegression()

lin_reg_model.fit(X_train,Y_train)

"""model evaluation"""

# prediction on training data
training_data_prediction = lin_reg_model.predict(X_train)

# R squared error
error_score = metrics.r2_score(Y_train, training_data_prediction)
print("R squared Error : ", error_score)

"""visualise the actual price and predicted price"""

plt.scatter(Y_train, training_data_prediction)
plt.xlabel("Actual price")
plt.ylabel("Predicted price")
plt.title(" Actual price vs Predicted prices")
plt.show()

# prediction on testing data
test_data_prediction = lin_reg_model.predict(X_test)

# R squared error
error_score = metrics.r2_score(Y_test, test_data_prediction)
print("R squared Error : ", error_score)

plt.scatter(Y_test, test_data_prediction)
plt.xlabel("Actual price")
plt.ylabel("Predicted price")
plt.title(" Actual price vs Predicted prices")
plt.show()

"""2.Lasso Regression"""

# loading the lasso regression model
lass_reg_model = Lasso()

lass_reg_model.fit(X_train,Y_train)

"""model evaluation"""

# prediction on training data
training_data_prediction = lass_reg_model.predict(X_train)

# R squared error
error_score = metrics.r2_score(Y_train, training_data_prediction)
print("R squared Error : ", error_score)

"""visualise the actual price and predicted price"""

plt.scatter(Y_train, training_data_prediction)
plt.xlabel("Actual price")
plt.ylabel("Predicted price")
plt.title(" Actual price vs Predicted prices")
plt.show()

# prediction on testing data
test_data_prediction = lass_reg_model.predict(X_test)

# R squared error
error_score = metrics.r2_score(Y_test, test_data_prediction)
print("R squared Error : ", error_score)

plt.scatter(Y_test, test_data_prediction)
plt.xlabel("Actual price")
plt.ylabel("Predicted price")
plt.title(" Actual price vs Predicted prices")
plt.show()

# Save the Linear Regression model
with open('linear_regression_model.pkl', 'wb') as file:
    pickle.dump(lin_reg_model, file)

# Save the Lasso model
with open('lasso_model.pkl', 'wb') as file:
    pickle.dump(lass_reg_model, file)
    
print("Model and vectorizer saved successfully.")


